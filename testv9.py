import os
import asyncio
import uuid
from dotenv import load_dotenv
load_dotenv()
from gtts import gTTS
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)
import google.generativeai as genai
from langdetect import detect, LangDetectException

# Configure Gemini API
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)

# Telegram Bot Token
TELE_TOKEN = os.getenv("TELE_TOKEN")
SAVE_DIR = "./data"
os.makedirs(SAVE_DIR, exist_ok=True)    

# Conversation states
ASK_RESPONSE_TYPE = 1

async def start(update: Update, context):
    """Start command handler."""
    await update.message.reply_text("G·ª≠i cho t√¥i c√¢u h·ªèi c·ªßa b·∫°n:")
    return ASK_RESPONSE_TYPE

async def ask_response_type(update: Update, context):
    """Store question and ask for response type with inline keyboard"""
    question = update.message.text
    context.user_data["question"] = question

    # G·ª≠i th√¥ng b√°o "ƒêang x·ª≠ l√Ω..."
    loading_message = await update.message.reply_text("ƒêang x·ª≠ l√Ω c√¢u h·ªèi...")

    # Nh·∫≠n di·ªán ng√¥n ng·ªØng·ªØ
    try:
        lang = detect(question)
        context.user_data["lang"] = lang
    except LangDetectException:
        lang = "en"
        context.user_data["lang"] = lang

    # T·∫°o b√†n inline keyboard ki·ªÉu ph·∫£n h·ªìi
    keyboard = [
        [
            InlineKeyboardButton("Text", callback_data="text"),
            InlineKeyboardButton("Audio", callback_data="audio"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # C·∫≠p nh·∫≠t tin nh·∫Øn loading th√†nh "Ch·ªçn ƒë·ªãnh d·∫°ng tr·∫£ l·ªùi:"
    await loading_message.edit_text("Ch·ªçn ƒë·ªãnh d·∫°ng tr·∫£ l·ªùi:", reply_markup=reply_markup)
    
    return ASK_RESPONSE_TYPE

import re  # Th√™m th∆∞ vi·ªán regex

MAX_TOKENS = 500  # Gi·ªõi h·∫°n s·ªë token t·ªëi ƒëa cho m·ªói c√¢u tr·∫£ l·ªùi

def truncate_text(text, max_tokens=MAX_TOKENS):
    """C·∫Øt b·ªõt c√¢u h·ªèi n·∫øu v∆∞·ª£t qu√° s·ªë token cho ph√©p"""
    words = text.split()
    if len(words) > max_tokens:
        return " ".join(words[:max_tokens])
    return text

def remove_urls(text):
    """Thay th·∫ø t·∫•t c·∫£ c√°c URL trong vƒÉn b·∫£n b·∫±ng '[li√™n k·∫øt]'"""
    url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    return re.sub(url_pattern, "[]", text)

def estimate_tokens(text):
    """∆Ø·ªõc l∆∞·ª£ng s·ªë token d·ª±a tr√™n s·ªë t·ª´"""
    return len(text.split())

async def handle_response(update: Update, context):
    """Handle inline keyboard response"""
    query = update.callback_query
    await query.answer()

    response_type = query.data
    question = context.user_data.get("question", "")
    lang = context.user_data.get("lang", "en")

    # G·ª≠i th√¥ng b√°o "ƒêang x·ª≠ l√Ω ph·∫£n h·ªìi..."
    loading_message = await query.edit_message_text("ƒêang x·ª≠ l√Ω ph·∫£n h·ªìi...")

    # L·∫•y t·ªïng s·ªë token ƒë√£ d√πng tr∆∞·ªõc ƒë√≥, m·∫∑c ƒë·ªãnh l√† 0
    total_used_tokens = context.user_data.get("total_used_tokens", 0)

    # Gi·ªõi h·∫°n s·ªë token c·ªßa c√¢u h·ªèi
    truncated_question = truncate_text(question)
    input_tokens = estimate_tokens(truncated_question)

    # Ki·ªÉm tra n·∫øu v∆∞·ª£t qu√° gi·ªõi h·∫°n token
    if total_used_tokens + input_tokens > MAX_TOKENS:
        await query.edit_message_text("B·∫°n ƒë√£ h·∫øt s·ªë token cho ph√©p trong h·ªôi tho·∫°i n√†y.")
        return ConversationHandler.END

    # G·ªçi API Gemini ƒë·ªÉ t·∫°o ph·∫£n h·ªìi
    model = genai.GenerativeModel("gemini-pro")
    try:
        response = model.generate_content(truncated_question, generation_config={"max_output_tokens": MAX_TOKENS})

        response_text = response.text.strip() if hasattr(response, "text") else "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi."
        response_text = response_text.replace('*', '')

        output_tokens = estimate_tokens(response_text)
        total_used_tokens += input_tokens + output_tokens
        context.user_data["total_used_tokens"] = total_used_tokens  # C·∫≠p nh·∫≠t t·ªïng s·ªë token

        # Th√™m s·ªë token ƒë√£ d√πng v√†o ph·∫£n h·ªìi
        response_text += f"\n\nüîπ Token ƒë√£ d√πng: {total_used_tokens}/{MAX_TOKENS}"

        # N·∫øu ph·∫£n h·ªìi l√† audio, x√≥a URL tr∆∞·ªõc khi ƒë·ªçc v√† th√™m th√¥ng tin token
        if response_type == "audio":
            tts_text = remove_urls(response_text)
            tts_lang = "vi" if lang == "vi" else "en"
            audio_path = os.path.join(SAVE_DIR, f"response_{uuid.uuid4()}.mp3")
            tts = gTTS(tts_text, lang=tts_lang)
            tts.save(audio_path)

            await loading_message.edit_text("ƒêang g·ª≠i ph·∫£n h·ªìi b·∫±ng audio...")
            await context.bot.send_voice(chat_id=query.message.chat_id, voice=open(audio_path, "rb"))
            asyncio.create_task(delete_file_after_delay(audio_path))
        else:
            await loading_message.edit_text(response_text)

    except Exception as e:
        await query.edit_message_text(f"L·ªói: {str(e)}")

    # Ti·∫øp t·ª•c h·ªôi tho·∫°i n·∫øu ch∆∞a h·∫øt token
    if total_used_tokens < MAX_TOKENS:
        await query.message.reply_text("B·∫°n c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi ti·∫øp theo:")
        return ASK_RESPONSE_TYPE
    else:
        await query.message.reply_text("B·∫°n ƒë√£ h·∫øt token cho h·ªôi tho·∫°i n√†y. Vui l√≤ng b·∫Øt ƒë·∫ßu l·∫°i v·ªõi /start")
        return ConversationHandler.END

async def delete_file_after_delay(file_path: str, delay: int = 3600):
    """Delete file after delay"""
    await asyncio.sleep(delay)
    if os.path.exists(file_path):
        os.remove(file_path)
        print(f"ƒê√£ x√≥a: {file_path}")

async def cancel(update: Update, context):
    """Cancel conversation"""
    await update.message.reply_text("H·ªßy b·ªè!")
    return ConversationHandler.END

# Th√™m tr·∫°ng th√°i END
END = ConversationHandler.END

async def stop(update: Update, context):
    """D·ª´ng h·ªôi tho·∫°i khi ng∆∞·ªùi d√πng nh·∫≠p /stop"""
    await update.message.reply_text("H·ªôi tho·∫°i ƒë√£ k·∫øt th√∫c. G√µ /start ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.")
    return END

def main():
    app = Application.builder().token(TELE_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_RESPONSE_TYPE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_response_type),
                CallbackQueryHandler(handle_response)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel), CommandHandler("stop", stop)],  # Th√™m /stop v√†o fallbacks
        allow_reentry=True  
    )
    
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
