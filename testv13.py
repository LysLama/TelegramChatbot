import os
import asyncio
import uuid
from dotenv import load_dotenv
load_dotenv()
from gtts import gTTS
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)
import google.generativeai as genai
from langdetect import detect, LangDetectException
import re  # Th∆∞ vi·ªán regex

# Configure Gemini API
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)

# Telegram Bot Token
TELE_TOKEN = os.getenv("TELE_TOKEN")
SAVE_DIR = "./data"
os.makedirs(SAVE_DIR, exist_ok=True)    

# Conversation state
ASK_RESPONSE_TYPE = 1
MAX_TOKENS = 50000  # Gi·ªõi h·∫°n s·ªë token t·ªëi ƒëa cho m·ªói c√¢u tr·∫£ l·ªùi

import time

# Th·ªùi gian s·ªëng c·ªßa token (gi·∫£ l·∫≠p, ƒë∆°n v·ªã: gi√¢y)
TOKEN_LIFETIME = 3600  # 1 gi·ªù

# H√†m t·∫°o token m·ªõi
def generate_session_token():
    return {
        "token": str(uuid.uuid4()),
        "expires_at": time.time() + TOKEN_LIFETIME
    }

def truncate_text(text, max_tokens=MAX_TOKENS):
    """C·∫Øt b·ªõt vƒÉn b·∫£n n·∫øu v∆∞·ª£t qu√° s·ªë token cho ph√©p"""
    words = text.split()
    if len(words) > max_tokens:
        return " ".join(words[:max_tokens])
    return text

def remove_urls(text):
    """Thay th·∫ø c√°c URL trong vƒÉn b·∫£n b·∫±ng '[li√™n k·∫øt]'"""
    url_pattern = r'http[s]?://(?:[a-zA-Z0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    return re.sub(url_pattern, "[]", text)

def estimate_tokens(text):
    """∆Ø·ªõc l∆∞·ª£ng s·ªë token d·ª±a tr√™n s·ªë t·ª´"""
    return len(text.split())

async def ask_response_type(update: Update, context):
    question = update.message.text
    context.user_data["question"] = question
    context.user_data.pop("gemini_response", None)

    # Kh·ªüi t·∫°o ho·∫∑c ki·ªÉm tra token phi√™n
    if "session_token" not in context.user_data:
        context.user_data["session_token"] = generate_session_token()
    else:
        # Gia h·∫°n token khi ng∆∞·ªùi d√πng t∆∞∆°ng t√°c
        context.user_data["session_token"]["expires_at"] = time.time() + TOKEN_LIFETIME

    loading_message = await update.message.reply_text("ƒêang x·ª≠ l√Ω c√¢u h·ªèi...")
    try:
        lang = detect(question)
        context.user_data["lang"] = lang
    except LangDetectException:
        lang = "en"
        context.user_data["lang"] = lang

    keyboard = [
        [
            InlineKeyboardButton("Text", callback_data="text"),
            InlineKeyboardButton("Audio", callback_data="audio"),
            InlineKeyboardButton("Refresh Token", callback_data="refresh_token"),  # N√∫t m·ªõi
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await loading_message.edit_text("Ch·ªçn ƒë·ªãnh d·∫°ng tr·∫£ l·ªùi:", reply_markup=reply_markup)
    
    return ASK_RESPONSE_TYPE

async def handle_response(update: Update, context):
    query = update.callback_query
    await query.answer()
    response_data = query.data

    # Ki·ªÉm tra token h·ª£p l·ªá
    session_token = context.user_data.get("session_token", {})
    if session_token.get("expires_at", 0) < time.time():
        await query.edit_message_text("Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n. Vui l√≤ng l√†m m·ªõi token!")
        return ASK_RESPONSE_TYPE

    if response_data == "refresh_token":
        context.user_data["session_token"] = generate_session_token()
        context.user_data["total_used_tokens"] = 0
        await query.edit_message_text(
            text="Token ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi th√†nh c√¥ng!\nB·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c ƒë·∫∑t c√¢u h·ªèi:",
            reply_markup=None
        )
        return ASK_RESPONSE_TYPE

    # X√°c ƒë·ªãnh ƒë√¢y l√† ph·∫£n h·ªìi ban ƒë·∫ßu hay y√™u c·∫ßu chuy·ªÉn ƒë·ªïi
    is_initial = response_data in ["text", "audio"]

    # ·∫®n inline keyboard c·ªßa tin nh·∫Øn g·ªëc (edit tin nh·∫Øn ƒë·ªÉ x√≥a reply_markup)
    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception:
        pass

    question = context.user_data.get("question", "")
    lang = context.user_data.get("lang", "en")

    total_used_tokens = context.user_data.get("total_used_tokens", 0)
    truncated_question = truncate_text(question)
    input_tokens = estimate_tokens(truncated_question)
    if total_used_tokens + input_tokens > MAX_TOKENS:
        await query.edit_message_text("B·∫°n ƒë√£ h·∫øt s·ªë token cho ph√©p trong h·ªôi tho·∫°i n√†y.")
        return ConversationHandler.END

    # N·∫øu ch∆∞a c√≥ ph·∫£n h·ªìi t·ª´ Gemini cho c√¢u h·ªèi hi·ªán t·∫°i, g·ªçi API
    if "gemini_response" not in context.user_data:
        model = genai.GenerativeModel("gemini-exp-1206")
        try:
            response = model.generate_content(truncated_question, generation_config={"max_output_tokens": MAX_TOKENS})
            response_text = response.text.strip() if hasattr(response, "text") else "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi."
            response_text = response_text.replace('*', '')
            output_tokens = estimate_tokens(response_text)
            total_used_tokens += input_tokens + output_tokens
            context.user_data["total_used_tokens"] = total_used_tokens
            # Th√™m th√¥ng tin token v√†o ph·∫£n h·ªìi
            response_text += f"\n\nüîπ Token ƒë√£ d√πng: {total_used_tokens}/{MAX_TOKENS}"
            context.user_data["gemini_response"] = response_text
        except Exception as e:
            await query.edit_message_text(f"L·ªói: {str(e)}")
            return ConversationHandler.END
    else:
        response_text = context.user_data["gemini_response"]

    # X·ª≠ l√Ω theo ƒë·ªãnh d·∫°ng y√™u c·∫ßu
    if response_data in ["text", "convert_text"]:
        # Hi·ªÉn th·ªã ph·∫£n h·ªìi d·∫°ng vƒÉn b·∫£n
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("Nghe Audio", callback_data="convert_audio"),
             InlineKeyboardButton("Refresh Token", callback_data="refresh_token")]
        ])
        try:
            await query.edit_message_text(text=response_text, reply_markup=keyboard)
        except Exception:
            await context.bot.send_message(chat_id=query.message.chat_id, text=response_text, reply_markup=keyboard)
    elif response_data in ["audio", "convert_audio"]:
        # G·ª≠i th√¥ng b√°o ƒëang x·ª≠ l√Ω audio
        try:
            await query.edit_message_text(text="ƒêang g·ª≠i ph·∫£n h·ªìi b·∫±ng audio...")
        except Exception:
            pass
        # Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n sang audio (lo·∫°i b·ªè URL tr∆∞·ªõc khi chuy·ªÉn gi·ªçng)
        tts_text = remove_urls(response_text)
        tts_lang = "vi" if lang == "vi" else "en"
        audio_path = os.path.join(SAVE_DIR, f"response_{uuid.uuid4()}.mp3")
        try:
            tts = gTTS(tts_text, lang=tts_lang, slow=False)
            tts.save(audio_path)
        except Exception as e:
            await context.bot.send_message(chat_id=query.message.chat_id, text=f"L·ªói khi t·∫°o audio: {str(e)}")
            return ConversationHandler.END
        # G·ª≠i voice message
        with open(audio_path, "rb") as audio_file:
            await context.bot.send_voice(chat_id=query.message.chat_id, voice=audio_file)
        asyncio.create_task(delete_file_after_delay(audio_path))
        # Sau khi g·ª≠i audio, cung c·∫•p inline keyboard cho ph√©p xem vƒÉn b·∫£n
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("Xem Text", callback_data="convert_text"),
             InlineKeyboardButton("Refresh Token", callback_data="refresh_token")]])
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="Ph·∫£n h·ªìi b·∫±ng audio ƒë√£ g·ª≠i. N·∫øu mu·ªën xem vƒÉn b·∫£n, b·∫•m n√∫t d∆∞·ªõi ƒë√¢y:",
            reply_markup=keyboard
        )

    # N·∫øu ƒë√¢y l√† ph·∫£n h·ªìi ban ƒë·∫ßu, y√™u c·∫ßu ng∆∞·ªùi d√πng ƒë·∫∑t c√¢u h·ªèi m·ªõi (n·∫øu c√≤n token)
    if is_initial:
        if total_used_tokens < MAX_TOKENS:
            await context.bot.send_message(chat_id=query.message.chat_id, text="B·∫°n c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi ti·∫øp theo:")
            return ASK_RESPONSE_TYPE
        else:
            await context.bot.send_message(chat_id=query.message.chat_id, text="B·∫°n ƒë√£ h·∫øt token cho h·ªôi tho·∫°i n√†y. Vui l√≤ng kh·ªüi ƒë·ªông l·∫°i bot.")
            return ConversationHandler.END
    else:
        return ASK_RESPONSE_TYPE

async def delete_file_after_delay(file_path: str, delay: int = 300):
    """X√≥a file sau m·ªôt kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh (m·∫∑c ƒë·ªãnh 5 ph√∫t)"""
    await asyncio.sleep(delay)
    if os.path.exists(file_path):
        os.remove(file_path)
        print(f"ƒê√£ x√≥a: {file_path}")

def main():
    app = Application.builder().token(TELE_TOKEN).build()
    
    # ConversationHandler s·∫Ω b·∫Øt ƒë·∫ßu ngay khi ng∆∞·ªùi d√πng g·ª≠i tin nh·∫Øn vƒÉn b·∫£n
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, ask_response_type)],
        states={
            ASK_RESPONSE_TYPE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_response_type),
                CallbackQueryHandler(handle_response)
            ]
        },
        fallbacks=[],  # Kh√¥ng c·∫ßn fallbacks v√¨ kh√¥ng d√πng /cancel hay /stop
        allow_reentry=True  
    )
    
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
