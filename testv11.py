import os
import asyncio
import uuid
from dotenv import load_dotenv
load_dotenv()
from gtts import gTTS
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)
import google.generativeai as genai
from langdetect import detect, LangDetectException
import re  # Th√™m th∆∞ vi·ªán regex

# Configure Gemini API
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)

# Telegram Bot Token
TELE_TOKEN = os.getenv("TELE_TOKEN")
SAVE_DIR = "./data"
os.makedirs(SAVE_DIR, exist_ok=True)    

# Conversation states
ASK_RESPONSE_TYPE = 1
MAX_TOKENS = 50000  # Gi·ªõi h·∫°n s·ªë token t·ªëi ƒëa cho m·ªói c√¢u tr·∫£ l·ªùi

def truncate_text(text, max_tokens=MAX_TOKENS):
    """C·∫Øt b·ªõt c√¢u h·ªèi n·∫øu v∆∞·ª£t qu√° s·ªë token cho ph√©p"""
    words = text.split()
    if len(words) > max_tokens:
        return " ".join(words[:max_tokens])
    return text

def remove_urls(text):
    """Thay th·∫ø t·∫•t c·∫£ c√°c URL trong vƒÉn b·∫£n b·∫±ng '[li√™n k·∫øt]'"""
    url_pattern = r'http[s]?://(?:[a-zA-Z0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    return re.sub(url_pattern, "[]", text)

def estimate_tokens(text):
    """∆Ø·ªõc l∆∞·ª£ng s·ªë token d·ª±a tr√™n s·ªë t·ª´"""
    return len(text.split())

async def start(update: Update, context):
    """Start command handler."""
    # Xo√° c√°c d·ªØ li·ªáu c≈© (n·∫øu c√≥) khi b·∫Øt ƒë·∫ßu h·ªôi tho·∫°i m·ªõi
    context.user_data.clear()
    await update.message.reply_text("G·ª≠i cho t√¥i c√¢u h·ªèi c·ªßa b·∫°n:")
    return ASK_RESPONSE_TYPE

async def ask_response_type(update: Update, context):
    """L∆∞u c√¢u h·ªèi m·ªõi v√† y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªçn ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi."""
    question = update.message.text
    context.user_data["question"] = question

    # X√≥a k·∫øt qu·∫£ c·ªßa c√¢u h·ªèi tr∆∞·ªõc (n·∫øu c√≥) ƒë·ªÉ ƒë·∫£m b·∫£o bot s·∫Ω t·∫°o ph·∫£n h·ªìi m·ªõi cho c√¢u h·ªèi hi·ªán t·∫°i
    context.user_data.pop("gemini_response", None)

    # G·ª≠i th√¥ng b√°o "ƒêang x·ª≠ l√Ω..."
    loading_message = await update.message.reply_text("ƒêang x·ª≠ l√Ω c√¢u h·ªèi...")

    # Nh·∫≠n di·ªán ng√¥n ng·ªØ
    try:
        lang = detect(question)
        context.user_data["lang"] = lang
    except LangDetectException:
        lang = "en"
        context.user_data["lang"] = lang

    # T·∫°o inline keyboard cho ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi ban ƒë·∫ßu
    keyboard = [
        [
            InlineKeyboardButton("Text", callback_data="text"),
            InlineKeyboardButton("Audio", callback_data="audio"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # C·∫≠p nh·∫≠t tin nh·∫Øn loading th√†nh "Ch·ªçn ƒë·ªãnh d·∫°ng tr·∫£ l·ªùi:" k√®m inline keyboard
    await loading_message.edit_text("Ch·ªçn ƒë·ªãnh d·∫°ng tr·∫£ l·ªùi:", reply_markup=reply_markup)
    
    return ASK_RESPONSE_TYPE


async def handle_response(update: Update, context):
    """X·ª≠ l√Ω callback t·ª´ inline keyboard cho c·∫£ ph·∫£n h·ªìi ban ƒë·∫ßu v√† chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng."""
    query = update.callback_query
    await query.answer()

    # L·∫•y callback_data: c√≥ th·ªÉ l√† "text", "audio", "convert_text" ho·∫∑c "convert_audio"
    response_data = query.data

    # X√°c ƒë·ªãnh ƒë√¢y l√† ph·∫£n h·ªìi ban ƒë·∫ßu hay y√™u c·∫ßu chuy·ªÉn ƒë·ªïi
    is_initial = response_data in ["text", "audio"]

    # ·∫®n inline keyboard c·ªßa tin nh·∫Øn g·ªëc (s·ª≠ d·ª•ng edit ƒë·ªÉ x√≥a reply_markup)
    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception:
        pass

    question = context.user_data.get("question", "")
    lang = context.user_data.get("lang", "en")

    # Ki·ªÉm tra s·ªë token c·ªßa c√¢u h·ªèi
    total_used_tokens = context.user_data.get("total_used_tokens", 0)
    truncated_question = truncate_text(question)
    input_tokens = estimate_tokens(truncated_question)
    if total_used_tokens + input_tokens > MAX_TOKENS:
        await query.edit_message_text("B·∫°n ƒë√£ h·∫øt s·ªë token cho ph√©p trong h·ªôi tho·∫°i n√†y.")
        return ConversationHandler.END

    # N·∫øu ch∆∞a c√≥ k·∫øt qu·∫£ t·ª´ Gemini, g·ªçi API ƒë·ªÉ t·∫°o ph·∫£n h·ªìi v√† l∆∞u v√†o context.user_data
    if "gemini_response" not in context.user_data:
        model = genai.GenerativeModel("gemini-pro")
        try:
            response = model.generate_content(truncated_question, generation_config={"max_output_tokens": MAX_TOKENS})
            response_text = response.text.strip() if hasattr(response, "text") else "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi."
            response_text = response_text.replace('*', '')
            output_tokens = estimate_tokens(response_text)
            total_used_tokens += input_tokens + output_tokens
            context.user_data["total_used_tokens"] = total_used_tokens
            # Th√™m th√¥ng tin token v√†o ph·∫£n h·ªìi
            response_text += f"\n\nüîπ Token ƒë√£ d√πng: {total_used_tokens}/{MAX_TOKENS}"
            context.user_data["gemini_response"] = response_text
        except Exception as e:
            await query.edit_message_text(f"L·ªói: {str(e)}")
            return ConversationHandler.END
    else:
        response_text = context.user_data["gemini_response"]

    # X·ª≠ l√Ω theo ƒë·ªãnh d·∫°ng y√™u c·∫ßu
    if response_data in ["text", "convert_text"]:
        # Hi·ªÉn th·ªã ph·∫£n h·ªìi d·∫°ng vƒÉn b·∫£n (text)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("Nghe Audio", callback_data="convert_audio")]
        ])
        try:
            await query.edit_message_text(text=response_text, reply_markup=keyboard)
        except Exception as e:
            # N·∫øu kh√¥ng th·ªÉ ch·ªânh s·ª≠a tin nh·∫Øn, g·ª≠i tin m·ªõi
            await context.bot.send_message(chat_id=query.message.chat_id, text=response_text, reply_markup=keyboard)
    elif response_data in ["audio", "convert_audio"]:
        # Th√¥ng b√°o ƒëang g·ª≠i ph·∫£n h·ªìi b·∫±ng audio (c√≥ th·ªÉ ch·ªânh s·ª≠a tin nh·∫Øn ƒë·ªÉ x√≥a keyboard)
        try:
            await query.edit_message_text(text="ƒêang g·ª≠i ph·∫£n h·ªìi b·∫±ng audio...")
        except Exception:
            pass
        # T·∫°o file audio t·ª´ ph·∫£n h·ªìi (lo·∫°i b·ªè URL tr∆∞·ªõc khi chuy·ªÉn gi·ªçng)
        tts_text = remove_urls(response_text)
        tts_lang = "vi" if lang == "vi" else "en"
        audio_path = os.path.join(SAVE_DIR, f"response_{uuid.uuid4()}.mp3")
        try:
            tts = gTTS(tts_text, lang=tts_lang, slow=False)
            tts.save(audio_path)
        except Exception as e:
            await context.bot.send_message(chat_id=query.message.chat_id, text=f"L·ªói khi t·∫°o audio: {str(e)}")
            return ConversationHandler.END
        # G·ª≠i voice message
        with open(audio_path, "rb") as audio_file:
            await context.bot.send_voice(chat_id=query.message.chat_id, voice=audio_file)
        asyncio.create_task(delete_file_after_delay(audio_path))
        # Sau khi g·ª≠i audio, cung c·∫•p inline keyboard cho ph√©p xem vƒÉn b·∫£n (chuy·ªÉn sang text)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("Xem Text", callback_data="convert_text")]
        ])
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="Ph·∫£n h·ªìi b·∫±ng audio ƒë√£ g·ª≠i. N·∫øu mu·ªën xem vƒÉn b·∫£n, b·∫•m n√∫t d∆∞·ªõi ƒë√¢y:",
            reply_markup=keyboard
        )

    # N·∫øu ƒë√¢y l√† ph·∫£n h·ªìi ban ƒë·∫ßu, v√† n·∫øu s·ªë token ch∆∞a h·∫øt, y√™u c·∫ßu ƒë·∫∑t c√¢u h·ªèi m·ªõi
    if is_initial:
        if total_used_tokens < MAX_TOKENS:
            await context.bot.send_message(chat_id=query.message.chat_id, text="B·∫°n c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi ti·∫øp theo:")
            return ASK_RESPONSE_TYPE
        else:
            await context.bot.send_message(chat_id=query.message.chat_id, text="B·∫°n ƒë√£ h·∫øt token cho h·ªôi tho·∫°i n√†y. Vui l√≤ng b·∫Øt ƒë·∫ßu l·∫°i v·ªõi /start")
            return ConversationHandler.END
    else:
        # N·∫øu l√† y√™u c·∫ßu chuy·ªÉn ƒë·ªïi, ti·∫øp t·ª•c duy tr√¨ tr·∫°ng th√°i h·ªôi tho·∫°i hi·ªán t·∫°i
        return ASK_RESPONSE_TYPE

async def delete_file_after_delay(file_path: str, delay: int = 300):
    """X√≥a file sau m·ªôt kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh"""
    await asyncio.sleep(delay)
    if os.path.exists(file_path):
        os.remove(file_path)
        print(f"ƒê√£ x√≥a: {file_path}")

async def cancel(update: Update, context):
    """H·ªßy h·ªôi tho·∫°i"""
    await update.message.reply_text("H·ªßy b·ªè!")
    return ConversationHandler.END

async def stop(update: Update, context):
    """D·ª´ng h·ªôi tho·∫°i khi ng∆∞·ªùi d√πng nh·∫≠p /stop"""
    await update.message.reply_text("H·ªôi tho·∫°i ƒë√£ k·∫øt th√∫c. G√µ /start ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.")
    return ConversationHandler.END

def main():
    app = Application.builder().token(TELE_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_RESPONSE_TYPE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_response_type),
                CallbackQueryHandler(handle_response)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel), CommandHandler("stop", stop)],
        allow_reentry=True  
    )
    
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
